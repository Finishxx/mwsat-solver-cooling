@startuml

class EvaluatedWSatConfig {
  + MaxWSatInstance(const &MaxWSatInstance)
  + instance: MaxWSatInstance*
  + configuration: SatConfig
  + weight: uint32_t
  + isSatisfied: boolean
  + satisfiedCount: uint32_t
}
EvaluatedWSatConfig *-- SatConfig

class SatConfig <<Struct>> {
  + instance: MaxWSatInstance*
  + underlying: vector<bool>
}

class MaxWSatSolver {
  - variables: vector<LiveVariable>
  - clauses: vector<LiveClause>
  + MaxWSatSolver(instance: MaxWSatInstance, initial: SatConfig)
  + evaluatedState(): const &EvaluatedWSatConfig
  + exportConfig(): EvaluatedWSatConfig
  + instance(): const &MaxWSatInstance
  + flipVariable(variable: uint32_t)
}
MaxWSatSolver "1" *-- MaxWSatInstance
MaxWSatSolver "1" *-- EvaluatedWSatConfig
note left of MaxWSatSolver::"variables: vector<LiveVariable>"
  Variable's id represents
  index into this
end note
note left of MaxWSatSolver::"evaluatedState(): const &EvaluatedWSatConfig"
  Is mutated on every variable flip
end note
note left of MaxWSatSolver::"exportConfig(): EvaluatedWSatConfig"
  Creates an independent copy
end note


class MaxWSatInstance {
  + MaxWSatInstance(vector<vector<int32_t>> clauses, vector<int32_t> weights)
  + clauses(): const &vector<Clause>
  + variables(): const &vector<Variable>
}
MaxWSatInstance "1..N" *-- Clause
MaxWSatInstance "1..N" *-- Variable
note left of MaxWSatInstance::"clauses: vector<Clause>"
  Throws in constructor
  if any class is unsatisfiable
end note

class Clause {
  + disjuncts: vector<Term>
  + isSatisfiable: boolean
}
note right of Clause::"disjuncts: vector<Term>"
  Unique and sorted
end note

Clause "1..N" *-- Term
class Term {
  - underlying: int32_t
  + id(): uint32_t
  + isNegated(): boolean
  + isPlain(): boolean
}
note left of Term::"id: uint32_t"
  <color:green>return</color> abs(underlying)
end note

note left of Term::"isNegated(): boolean"
  <color:green>return</color> underlying < 0
end note

note left of Term::"isPlain(): boolean"
  <color:green>return</color> underlying > 0
end note

class Variable {
  + id: uint32_t
  + weight: int32_t
  + occurrences: vector<Clause>
}
Variable "1..N" *- Clause




@enduml